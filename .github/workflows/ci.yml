name: CI - Ejecutar Notebook y guardar resultados

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  run-notebooks:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      # Lista de notebooks a ejecutar (primero el de seguridad)
      NOTEBOOKS: |
        audit_security.ipynb
        # PuntoVentas.ipynb   # <- descomenta si quieres ejecutar también este

    steps:
      - name: 🔄 Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: 📦 Install deps
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Herramientas para ejecutar notebooks en CI
          pip install jupyter nbconvert nbclient ipykernel
          # Libs útiles del pipeline
          pip install openai json5 requests rich

      - name: 🔑 Ensure OPENAI_API_KEY present
        run: |
          test -n "${OPENAI_API_KEY}" || (echo "OPENAI_API_KEY no está definido como secret." && exit 1)

      - name: 🧪 Execute notebooks
        shell: bash
        run: |
          mkdir -p results
          echo "📝 Notebooks a ejecutar:"
          echo "${NOTEBOOKS}"
          while IFS= read -r nb; do
            # Saltar líneas vacías o comentadas
            [[ -z "$nb" || "$nb" =~ ^# ]] && continue
            echo "▶ Ejecutando $nb"
            test -f "$nb" || (echo "❌ No existe $nb en $(pwd)" && exit 2)
            jupyter nbconvert \
              --to notebook \
              --execute "$nb" \
              --output "executed_${nb}" \
              --log-level=DEBUG \
              --ExecutePreprocessor.timeout=1800 \
              --ExecutePreprocessor.kernel_name=python3 \
              --ExecutePreprocessor.allow_errors=True
          done <<< "${NOTEBOOKS}"

      - name: 🧠 (Opcional) Security audit script if present
        run: |
          if [ -f audit_security.py ]; then
            echo "Encontrado audit_security.py → ejecutando..."
            python audit_security.py
          else
            echo "No se encontró audit_security.py (ok, la auditoría ya corre desde el notebook)."
          fi

      - name: 🧾 Save stdout from executed notebooks
        run: |
          python - <<'PY'
          import os, glob, nbformat
          os.makedirs("results", exist_ok=True)
          for path in glob.glob("executed_*.ipynb"):
            nb = nbformat.read(path, as_version=4)
            out_lines = []
            for cell in nb.cells:
              for o in cell.get("outputs", []):
                if o.get("output_type") == "stream" and o.get("text"):
                  out_lines.append(o["text"])
            name = os.path.splitext(os.path.basename(path))[0] + "_stdout.txt"
            with open(os.path.join("results", name), "w", encoding="utf-8") as f:
              f.write("".join(out_lines))
            print(f"✅ Guardado: results/{name}")
          PY

      - name: ⬆️ Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: executed-and-results
          path: |
            executed_*.ipynb
            results/

      - name: 💾 Commit results (if any)
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add executed_*.ipynb results/ || true
          git commit -m "CI: update executed notebooks and results" || echo "No changes"
          git push || true
