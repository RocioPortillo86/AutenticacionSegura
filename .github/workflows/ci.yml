name: CI - Ejecutar Notebook y guardar resultados

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]   # ejecuta en cualquier cambio a main

permissions:
  contents: write

jobs:
  run-notebook:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NOTEBOOK_FILE: PuntoVentas.ipynb   # cambia el nombre si tu notebook es otro

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install jupyter nbconvert
          # ‚ûï Necesario para la auditor√≠a
          pip install openai json5

      - name: Ensure OPENAI_API_KEY present
        run: |
          test -n "${OPENAI_API_KEY}" || (echo "OPENAI_API_KEY no est√° definido como secret." && exit 1)

      - name: Execute notebook
        run: |
          jupyter nbconvert --to notebook --execute "$NOTEBOOK_FILE" \
            --output executed.ipynb \
            --ExecutePreprocessor.timeout=1200 \
            --ExecutePreprocessor.kernel_name=python3

      - name: Ensure results folder
        run: mkdir -p results

      # üß† Ejecutar auditor√≠a de seguridad sobre /codigos y guardar JSON en /results
      - name: Security audit (codigos ‚Üí results)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Asume que a√±adiste el script en la ra√≠z del repo
          python audit_security.py

      - name: Save text output to results/codigo_generado.cs
        run: |
          python - <<'PY'
          import nbformat, os
          nb = nbformat.read("executed.ipynb", as_version=4)
          out_lines = []
          for cell in nb.cells:
              for o in cell.get("outputs", []):
                  if o.get("output_type") == "stream" and o.get("text"):
                      out_lines.append(o["text"])
          os.makedirs("results", exist_ok=True)
          with open("results/codigo_generado.cs","w",encoding="utf-8") as f:
              f.write("\n".join(out_lines))
          print("results/codigo_generado.cs escrito")
          PY

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: executed-and-results
          path: |
            executed.ipynb
            results/

      - name: Commit results (if any)
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add executed.ipynb results/ || true
          git commit -m "CI: update executed notebook and results" || echo "No changes"
          git push || true
